
--- Inhalt von ./fitness_tracker/manage.py ---

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fitness_tracker.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

--- Inhalt von ./fitness_tracker/fitness_tracker\asgi.py ---

"""
ASGI config for fitness_tracker project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fitness_tracker.settings')

application = get_asgi_application()

--- Inhalt von ./fitness_tracker/fitness_tracker\settings.py ---

"""
Django settings for fitness_tracker project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from telnetlib import LOGOUT

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-lpb9!i-^79z&kf$(jl55gvl$&$hei!i=gbqi3l1lk!8)os#1lw"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    ###
    "tracker",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "fitness_tracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "fitness_tracker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Added for the project
AUTH_USER_MODEL = "tracker.User"
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "index"
LOGOUT_REDIRECT_URL = "/accounts/login/"

--- Inhalt von ./fitness_tracker/fitness_tracker\urls.py ---

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("tracker.urls")),
]

--- Inhalt von ./fitness_tracker/fitness_tracker\wsgi.py ---

"""
WSGI config for fitness_tracker project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fitness_tracker.settings')

application = get_wsgi_application()

--- Inhalt von ./fitness_tracker/fitness_tracker\__init__.py ---


--- Inhalt von ./fitness_tracker/fitness_tracker.egg-info\dependency_links.txt ---



--- Inhalt von ./fitness_tracker/fitness_tracker.egg-info\SOURCES.txt ---

LICENSE
README.md
pyproject.toml
setup.cfg
fitness_tracker/fitness_tracker/__init__.py
fitness_tracker/fitness_tracker/asgi.py
fitness_tracker/fitness_tracker/settings.py
fitness_tracker/fitness_tracker/urls.py
fitness_tracker/fitness_tracker/wsgi.py
fitness_tracker/fitness_tracker.egg-info/PKG-INFO
fitness_tracker/fitness_tracker.egg-info/SOURCES.txt
fitness_tracker/fitness_tracker.egg-info/dependency_links.txt
fitness_tracker/fitness_tracker.egg-info/top_level.txt
fitness_tracker/tracker/__init__.py
fitness_tracker/tracker/admin.py
fitness_tracker/tracker/apps.py
fitness_tracker/tracker/models.py
fitness_tracker/tracker/tests.py
fitness_tracker/tracker/views.py
fitness_tracker/tracker/migrations/__init__.py
--- Inhalt von ./fitness_tracker/fitness_tracker.egg-info\top_level.txt ---

fitness_tracker
tracker

--- Inhalt von ./fitness_tracker/tracker\admin.py ---

from django.contrib import admin
from tracker.models import User

admin.site.register(User)

--- Inhalt von ./fitness_tracker/tracker\apps.py ---

from django.apps import AppConfig


class TrackerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'tracker'

--- Inhalt von ./fitness_tracker/tracker\forms.py ---

from django import forms

from .models import Measurement, WorkoutSession


class MeasurementForm(forms.ModelForm):
    class Meta:
        model = Measurement
        fields = ["date", "weight", "body_fat_percentage"]
        widgets = {"date": forms.DateInput(attrs={"type": "date"})}


class WorkoutSessionForm(forms.ModelForm):
    class Meta:
        model = WorkoutSession
        fields = ["date", "duration", "notes"]
        widgets = {"date": forms.DateInput(attrs={"type": "date"})}

--- Inhalt von ./fitness_tracker/tracker\models.py ---

from django.contrib.auth.models import AbstractUser
from django.db import models


class User(AbstractUser):
    pass


class Measurement(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="measurements"
    )
    date = models.DateField()
    weight = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    body_fat_percentage = models.DecimalField(
        max_digits=5, decimal_places=2, null=True, blank=True
    )

    def __str__(self):
        return f"Measurement of {self.user.username} on {self.date}"


class WorkoutSession(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="workout_sessions"
    )
    date = models.DateField()
    duration = models.PositiveIntegerField()  # Dauer in Minuten
    notes = models.TextField(blank=True)

    def __str__(self):
        return f"Workout Session of {self.user.username} on {self.date}"

--- Inhalt von ./fitness_tracker/tracker\tests.py ---


--- Inhalt von ./fitness_tracker/tracker\urls.py ---

from django.urls import include, path

from . import views

urlpatterns = [
    path("", views.index, name="index"),
    path("add_measurement/", views.add_measurement, name="add_measurement"),
    path("add_workout_session/", views.add_workout_session, name="add_workout_session"),
    path("accounts/", include("django.contrib.auth.urls")),
]

--- Inhalt von ./fitness_tracker/tracker\views.py ---

from django.contrib.auth.decorators import login_required
from django.shortcuts import redirect, render

from .forms import MeasurementForm, WorkoutSessionForm
from .models import Measurement, WorkoutSession


@login_required
def add_measurement(request):
    if request.method == "POST":
        form = MeasurementForm(request.POST)
        if form.is_valid():
            measurement = form.save(commit=False)
            measurement.user = request.user
            measurement.save()
            return redirect("index")
    else:
        form = MeasurementForm()
    return render(request, "tracker/add_measurement.html", {"form": form})


@login_required
def add_workout_session(request):
    if request.method == "POST":
        form = WorkoutSessionForm(request.POST)
        if form.is_valid():
            session: WorkoutSession = form.save(commit=False)
            session.user = request.user
            session.save()
            return redirect("index")
    else:
        form = WorkoutSessionForm()
    return render(request, "tracker/add_workout_session.html", {"form": form})


@login_required
def index(request):
    measurements = Measurement.objects.filter(user=request.user).order_by("-date")
    workout_sessions = WorkoutSession.objects.filter(user=request.user).order_by(
        "-date"
    )
    return render(
        request,
        "tracker/index.html",
        {"measurements": measurements, "workout_sessions": workout_sessions},
    )

--- Inhalt von ./fitness_tracker/tracker\__init__.py ---


--- Inhalt von ./fitness_tracker/tracker\migrations\0001_initial.py ---

# Generated by Django 5.1.1 on 2024-09-15 19:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

--- Inhalt von ./fitness_tracker/tracker\migrations\0002_measurement.py ---

# Generated by Django 5.1.1 on 2024-09-15 20:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('body_fat_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

--- Inhalt von ./fitness_tracker/tracker\migrations\0003_workoutsession.py ---

# Generated by Django 5.1.1 on 2024-09-16 11:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0002_measurement'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('duration', models.PositiveIntegerField()),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

--- Inhalt von ./fitness_tracker/tracker\migrations\__init__.py ---


--- Inhalt von ./fitness_tracker/tracker\templates\registration\login.html ---

{% extends 'tracker/base.html' %}

{% block title %}
  Login
{% endblock %}

{% block content %}
  <h1>Login</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Anmelden</button>
  </form>
{% endblock %}

--- Inhalt von ./fitness_tracker/tracker\templates\tracker\add_measurement.html ---

{% extends 'tracker/base.html' %}

{% block title %}
  Add Measurement
{% endblock %}

{% block content %}
  <h1>Add Measurement</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save</button>
  </form>
{% endblock %}

--- Inhalt von ./fitness_tracker/tracker\templates\tracker\add_workout_session.html ---

{% extends 'tracker/base.html' %}

{% block title %}
  Add Workout Session
{% endblock %}

{% block content %}
  <h1>Add Workout Session</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save</button>
  </form>
{% endblock %}

--- Inhalt von ./fitness_tracker/tracker\templates\tracker\base.html ---

<!DOCTYPE html>
<html>
  <head>
    <title>
      {% block title %}
        Fitness Tracker
      {% endblock %}
    </title>
  </head>
  <body>
    <nav>
      <a href="{% url 'index' %}">Home</a>
      {% if user.is_authenticated %}
        <a href="{% url 'add_measurement' %}">Add Measurement</a>
        <a href="{% url 'add_workout_session' %}">Add Workout Session</a>
        <form id="logout-form" action="{% url 'logout' %}" method="post" style="display: inline;">
          {% csrf_token %}
          <button type="submit">Logout</button>
        </form>
      {% else %}
        <a href="{% url 'login' %}">Login</a>
      {% endif %}
    </nav>

    {% block content %}

    {% endblock %}
  </body>
</html>

--- Inhalt von ./fitness_tracker/tracker\templates\tracker\index.html ---

{% extends 'tracker/base.html' %}

{% block title %}
  Home
{% endblock %}

{% block content %}
  <h1>Welcome, {{ user.username }}</h1>

  <h2>Your Measurements:</h2>
  <ul>
    {% for measurement in measurements %}
      <li>
        {{ measurement.date }}:{% if measurement.weight %}
          Weight: {{ measurement.weight }} kg
        {% endif %}
        {% if measurement.body_fat_percentage %}
          , Body Fat: {{ measurement.body_fat_percentage }}%
        {% endif %}
      </li>
    {% empty %}
      <li>No measurements found.</li>
    {% endfor %}
  </ul>

  <h2>Your Workout Sessions:</h2>
  <ul>
    {% for session in workout_sessions %}
      <li>
        {{ session.date }}: {{ session.duration }} minutes{% if session.notes %}
          - {{ session.notes }}
        {% endif %}
      </li>
    {% empty %}
      <li>No workout sessions found.</li>
    {% endfor %}
  </ul>
{% endblock %}

--- Inhalt von ./fitness_tracker/tracker\tests\test_models.py ---

import datetime

import pytest
from django.contrib.auth import get_user_model
from django.forms import ValidationError
from tracker.models import Measurement, WorkoutSession

User = get_user_model()


@pytest.mark.django_db
def test_user_creation():
    user = User.objects.create_user(
        username="testuser", password="testpass123", email="testuser@example.com"
    )
    assert user.username == "testuser"
    assert user.email == "testuser@example.com"
    assert user.check_password("testpass123")


@pytest.mark.django_db
def test_measurement_creation():
    user = User.objects.create_user(username="testuser", password="testpass123")
    measurement = Measurement.objects.create(
        user=user,
        date=datetime.date(2023, 10, 5),
        weight=70.5,
        body_fat_percentage=20.0,
    )
    assert measurement.user == user
    assert measurement.weight == 70.5
    assert measurement.body_fat_percentage == 20.0
    assert str(measurement) == f"Measurement of {user.username} on 2023-10-05"


User = get_user_model()


@pytest.mark.django_db
def test_workout_session_creation():
    user = User.objects.create_user(username="testuser", password="testpass123")
    workout_date = datetime.date(2023, 10, 10)
    duration = 60  # in Minutes
    notes = "Morning cardio session"

    session: WorkoutSession = WorkoutSession.objects.create(
        user=user, date=workout_date, duration=duration, notes=notes
    )

    assert session.user == user
    assert session.date == workout_date
    assert session.duration == duration
    assert session.notes == notes
    assert str(session) == f"Workout Session of {user.username} on {workout_date}"


@pytest.mark.django_db
def test_workout_session_negative_duration():
    user = User.objects.create_user(username="testuser", password="testpass123")
    workout_date = datetime.date(2023, 10, 10)
    invalid_duration = -30  # Ungültige Dauer (negativ)

    session: WorkoutSession = WorkoutSession(
        user=user,
        date=workout_date,
        duration=invalid_duration,
    )
    # Versuche, die Sitzung zu speichern und erwarte einen ValidationError
    with pytest.raises(ValidationError) as exc_info:
        session.full_clean()  # Validierung auslösen
        session.save()

    assert "duration" in exc_info.value.message_dict

--- Inhalt von ./fitness_tracker/tracker\tests\test_views.py ---

# tracker/tests/test_views.py

import pytest
from django.contrib.auth import get_user_model
from django.test.client import Client
from django.urls import reverse
from tracker.models import Measurement, WorkoutSession

User = get_user_model()


@pytest.mark.django_db
def test_add_measurement_view_authenticated(client: Client):
    user = User.objects.create_user(username="testuser", password="testpass123")
    client.force_login(user)
    url = reverse("add_measurement")
    response = client.get(url)
    assert response.status_code == 200
    assert b"Add Measurement" in response.content

    # Test the form submission
    response = client.post(
        url, {"date": "2023-10-05", "weight": 70.5, "body_fat_percentage": 20.0}
    )
    assert response.status_code == 302  # Redirect after successful submission
    measurement = Measurement.objects.get(user=user, date="2023-10-05")
    assert measurement.weight == 70.5
    assert measurement.body_fat_percentage == 20.0


def test_add_measurement_view_unauthenticated(client):
    url = reverse("add_measurement")
    response = client.get(url)
    assert response.status_code == 302  # Redirect to login
    assert "/login/" in response.url


@pytest.mark.django_db
def test_user_can_login(client: Client):
    # Erstelle einen Testbenutzer
    username = "testuser"
    password = "testpass123"
    User.objects.create_user(username=username, password=password)

    # Sende eine POST-Anfrage an die Login-URL mit den Anmeldedaten
    url = reverse("login")
    response = client.post(
        url,
        {
            "username": username,
            "password": password,
        },
    )

    # Überprüfe, ob der Benutzer nach erfolgreicher Anmeldung weitergeleitet wird
    assert response.status_code == 302
    assert response.url == reverse("index")

    # Überprüfe, ob der Benutzer tatsächlich angemeldet ist
    response = client.get(reverse("index"))
    assert response.status_code == 200
    assert response.wsgi_request.user.is_authenticated
    assert response.wsgi_request.user.username == username


@pytest.mark.django_db
def test_user_can_logout(client: Client):
    username = "testuser"
    password = "testpass123"
    user = User.objects.create_user(username=username, password=password)
    client.force_login(user)

    url = reverse("logout")
    response = client.post(url)

    assert response.status_code == 302
    assert response.url == reverse("login")

    assert "_auth_user_id" not in client.session


def test_login_required_redirect(client: Client):
    url = reverse("add_measurement")
    response = client.get(url)
    assert response.status_code == 302
    assert "/accounts/login/" in response.url


@pytest.mark.django_db
def test_add_workout_session_view_authenticated(client: Client):
    user = User.objects.create_user(username="testuser", password="testpass123")
    client.force_login(user)
    url = reverse("add_workout_session")
    response = client.get(url)
    assert response.status_code == 200
    assert b"Add Workout Session" in response.content

    # Teste das Absenden des Formulars
    response = client.post(
        url, {"date": "2023-10-10", "duration": 60, "notes": "Morning cardio session"}
    )
    assert response.status_code == 302  # Erfolgreiche Weiterleitung
    session = WorkoutSession.objects.get(user=user, date="2023-10-10")
    assert session.duration == 60
    assert session.notes == "Morning cardio session"


def test_add_workout_session_view_unauthenticated(client: Client):
    url = reverse("add_workout_session")
    response = client.get(url)
    assert response.status_code == 302  # Weiterleitung zur Login-Seite
    assert "/accounts/login/" in response.url
